
inn {
  facade {
    rest-api.host = "localhost"
    rest-api.port = "8080"
    http.max-connections = 40000
    raml.file = "facade-config.raml"
    maxResubscriptionsCount = 10
  }

  util {
    http.rest-service {
      access-log.enabled = false
      cors.allowed-origins = [
        "localhost"
        "127.0.0.1"
        "4game.com"
        "4gametest.com"
        "4game.com.vgl"
      ]
      cors.allowed-paths = [
        "/users/\\w+/trackings"
      ]
    }

    graphite {
      enabled = true
      host = "graphite.lux.inn.eu"
      port = 12345
      prefix = "hyperbus-facade"
      host-suffix = "monitoring"
      report-period = 1000
    }
  }
}

actor-system-registry {
  eu-inn {
    akka-system-name = eu-inn
    akka {
      loggers = ["akka.event.slf4j.Slf4jLogger"]
      actor {
        provider = "akka.cluster.ClusterActorRefProvider"
      }
      cluster.seed-nodes = [
        "akka.tcp://eu-inn@127.0.0.1:10000"
      ]
      remote {
        netty.tcp.port = 10004
        netty.tcp.hostname = 127.0.0.1
        log-remote-lifecycle-events = off
      }
      contrib.cluster.pub-sub {
        name = distributedPubSubMediator
        role = ""
        gossip-interval = 1s
        removed-time-to-live = 120s
      }
    }
  }
}

seed-node-service {
  akka-system-name = eu-inn
  akka {
    actor {
        provider = "akka.cluster.ClusterActorRefProvider"
      }
    remote.netty.tcp.hostname: 127.0.0.1
    remote.netty.tcp.port: 10000

    cluster.seed-nodes: [
      "akka.tcp://eu-inn@127.0.0.1:10000"
    ]
  }
}

hyperbus {
  transports {
    akka-cluster-client {
      class-name = DistributedAkkaClientTransport,
      configuration = ${actor-system-registry.eu-inn}
    }
    akka-cluster-server {
      class-name = DistributedAkkaServerTransport,
      configuration = ${actor-system-registry.eu-inn}
    }
    kafka-client {
      class-name: KafkaClientTransport
      configuration {
        routes: [
          { kafka.topic: facade }
        ]
        producer {
          bootstrap.servers: "localhost:9092"
          acks: 1
          retries: 16
          compression.type: "snappy"
        }
        log-messages: true
      }
    }
    kafka-server {
      class-name: KafkaServerTransport,
      configuration {
        routes: [
          { kafka.topic: facade }
        ]
        consumer {
          zookeeper.connect: "localhost:2181"
          auto.commit.interval.ms: 10000
          fetch.message.max.bytes: 262144
        }
        log-messages: true
      }
    }
  }
  client-routes: [
    { topic.url: { match-type: Regex, value: "^.*/events*$" },  transport: kafka-client }
    { transport: akka-cluster-client }
  ]
  server-routes: [
    { topic.url: { match-type: Regex, value: "^.*/events*$" },  transport: kafka-server }
    { transport: akka-cluster-server }
  ]
  facade.group-name = "127.0.0.1-10004"
}
