
inn {
  util.http.rest-service {
    cors.allowed-origins = [
      "localhost"
      "127.0.0.1"
      "4game.com"
      "4gametest.com"
      "4game.com.vgl"
    ]
    cors.allowed-paths = [
      "/users/\\w+/trackings"
    ]
  }

  forgame {
    auth {
      jwt.providers {
        deskpro.fields = ["id", "email"]
        arena.fields   = ["id", "email", "name", "country", "picture", "pb"]
      }
    }

    pincodes.public-emissions = [971]
  }

  service-bus {
    transports {
      kafka-user-events {
        enabled = true
        type    = kafka
        topic   = "user-events-in"

        producer.producer.type = "async"
      }

      kafka-tracking-events {
        enabled = true
        type    = kafka
        topic   = "tracking-events-in"

        producer.producer.type = "async"
      }
    }
    routing {
      "eu.inn.datamodel.forgame.user.PageViewed" { out: ["kafka-user-events"] }
      "eu.inn.datamodel.revault.UserStorageUpdated" { out: ["kafka-user-events"] }
      "eu.inn.datamodel.revault.UserStorageDeleted" { out: ["kafka-user-events"] }
      "eu.inn.datamodel.forgame.tracking.Tracked" { out: ["kafka-tracking-events"] }
      "eu.inn.datamodel.forgame.achievements.UserEvent" { out: ["kafka-user-events"] }
    }
  }
}

actor-system-registry {
  eu-inn {
    akka-system-name = eu-inn
    akka {
      loggers = ["akka.event.slf4j.Slf4jLogger"]
      actor {
        provider = "akka.cluster.ClusterActorRefProvider"
      }
      cluster.seed-nodes = [
        "akka.tcp://eu-inn@127.0.0.1:10000"
      ]
      remote {
        netty.tcp.port = 10004
        netty.tcp.hostname = 127.0.0.1
        log-remote-lifecycle-events = off
      }
      contrib.cluster.pub-sub {
        name = distributedPubSubMediator
        role = ""
        gossip-interval = 1s
        removed-time-to-live = 120s
      }
    }
  }
}

seed-node-service: {
  akka-system-name = eu-inn
  akka {
    actor {
        provider = "akka.cluster.ClusterActorRefProvider"
      }
    remote.netty.tcp.hostname: 127.0.0.1
    remote.netty.tcp.port: 10000

    cluster.seed-nodes: [
      "akka.tcp://eu-inn@127.0.0.1:10000"
    ]
  }
}

hyperbus {
  transports {
    akka-cluster-client {
      class-name = DistributedAkkaClientTransport,
      configuration = ${actor-system-registry.eu-inn}
    }
    akka-cluster-server {
      class-name = DistributedAkkaServerTransport,
      configuration = ${actor-system-registry.eu-inn}
    }
    kafka-client {
      class-name: KafkaClientTransport
      configuration {
        routes: [
          { kafka.topic: test-facade }
        ]
        producer {
          bootstrap.servers: "localhost:9092"
          acks: 1
          retries: 16
          compression.type: "snappy"
        }
        log-messages: true
      }
    }
    kafka-server {
      class-name: KafkaServerTransport,
      configuration {
        routes: [
          { kafka.topic: test-facade }
        ]
        consumer {
          zookeeper.connect: "localhost:2181"
          auto.commit.interval.ms: 10000
          fetch.message.max.bytes: 262144
        }
        log-messages: true
      }
    }
  }
  client-routes: [
    { topic.url: { match-type: Regex, value: "^\\/events\\/.*$" },  transport: kafka-client }
    { transport: akka-cluster-client }
  ]
  server-routes: [
    { topic.url: { match-type: Regex, value: "^\\/events\\/.*$" },  transport: kafka-server }
    { transport: akka-cluster-server }
  ]
  facade.group-name = "127.0.0.1-10004"
}
