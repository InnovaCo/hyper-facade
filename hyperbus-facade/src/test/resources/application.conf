actor-system-registry {
  eu-inn {
    akka-system-name = eu-inn
    akka {
      actor {
        provider = "akka.cluster.ClusterActorRefProvider"
      }
      cluster.seed-nodes = [
        "akka.tcp://eu-inn@127.0.0.1:10000"
      ]
      remote {
        netty.tcp.port = 10002
        netty.tcp.hostname = 127.0.0.1
        log-remote-lifecycle-events = off
      }
      contrib.cluster.pub-sub {
        name = distributedPubSubMediator
        role = ""
        gossip-interval = 1s
        removed-time-to-live = 120s
      }
    }
  }
}

hyperbus: {
  transports: {
    akka-cluster-client {
      class-name = DistributedAkkaClientTransport,
      configuration = ${actor-system-registry.eu-inn}
    }
    akka-cluster-server {
      class-name = DistributedAkkaServerTransport,
      configuration = ${actor-system-registry.eu-inn}
    }
    kafka-client: {
      class-name: KafkaClientTransport,
      configuration: {
        routes: [
          {
            kafka.topic: test-facade
            kafka.partition-keys: ["content"]
          }
        ]
        producer.bootstrap.servers: "localhost:9092"
      }
    }
    kafka-server: {
      class-name: KafkaServerTransport,
      configuration: {
        routes: [
          {
            kafka.topic: test-facade
            kafka.partition-keys: ["content"]
          }
        ]
        consumer.zookeeper.connect: "localhost:2181"
      }
    }
  }
  client-routes: [
    { topic.url: { match-type: Specific, value: "/test-facade{content}" },  transport: kafka-client }
    { transport: akka-cluster-client }
  ]
  server-routes: [
    { topic.url: { match-type: Specific, value: "/test-facade{content}" },  transport: kafka-server }
    { transport: akka-cluster-server }
  ]
}
